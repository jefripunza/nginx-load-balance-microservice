# user                  www www;  ## Default: nobody
worker_processes      5;  ## Default: 1
worker_rlimit_nofile  8192;
pid                   logs/nginx.pid;

error_log  logs/error.log;
error_log  logs/critical.error.log  crit;

events {
  worker_connections  4096;  ## Default: 1024
}

#-> see more : https://musaamin.web.id/cara-setting-load-balancing-dengan-nginx/
# upstream backend {
#   least_conn;
#     server 10.130.127.167; #node1
#     server 10.130.128.35;  #node2
# }

http {
  # default value :
  default_type  application/octet-stream;

  #-> import :
  include  /etc/nginx/mime.types;

  #-> configure :
  # cache informations about FDs, frequently accessed files
  # can boost performance, but you need to test those values
  open_file_cache           max=200000  inactive=20s;
  open_file_cache_valid     30s;
  open_file_cache_min_uses  2;
  open_file_cache_errors    on;

  # copies data between one FD and other from within the kernel
  # faster than read() + write()
  sendfile  on;

  proxy_redirect    off;
  proxy_set_header  Host             $host;
  proxy_set_header  X-Real-IP        $remote_addr;
  proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;

  client_max_body_size           10000M; # limit upload
  types_hash_max_size            2048;
  server_names_hash_bucket_size  128; # this seems to be required for some vhosts

  # send headers in one piece, it is better than sending them one by one
  tcp_nopush   on;
  # don't buffer data sent, good for small data bursts in real time
  tcp_nodelay  on;

  #-> logger format (all)
  log_format  main  '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

  #-> Compression config, reduce the data that needs to be sent over network
  gzip on;
  gzip_min_length 1024;
  gzip_comp_level 1;
  gzip_vary on;
  gzip_disable "MSIE [1-6]\.(?!.*SV1)";
  gzip_proxied any;
  gzip_buffers 4 32k;
  gunzip on;
  gzip_types
    text/xml
    application/xml
    application/xml+rss
    application/rss+xml
    application/atom+xml
    text/css
    application/javascript
    application/x-javascript
    text/javascript
    application/json
    font/truetype
    font/opentype
    application/vnd.ms-fontobject
    image/x-icon
    image/svg+xml
    image/bmp
    text/x-component
    text/plain;

  # allow the server to close connection on non responding client, this will free up memory
  reset_timedout_connection on;

  # request timed out -- default 60
  client_body_timeout 10;

  # if client stop responding, free up memory -- default 60
  send_timeout 2;

  # server will close connection after this time -- default 75
  keepalive_timeout 30;

  #-> NGINX Simple DDoS Defense
  # limit the number of connections per single IP
  limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
  # limit the number of requests for a given session
  limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;
  # if the request body size is more than the buffer size, then the entire (or partial)
  # request body is written into a temporary file
  client_body_buffer_size  128k;
  # maximum number and size of buffers for large headers to read from client request
  large_client_header_buffers 4 256k;

  #-> load balancing (website & all service)
  server {
    access_log   logs/server.access.log  main; # website & all service
    listen       80;
    server_name  localhost;
    root         /usr/share/nginx/html;

    #-> NGINX Simple DDoS Defense
    limit_conn conn_limit_per_ip 10;
    limit_req zone=req_limit_per_ip burst=10 nodelay;

    #-> register all service
    set  $url_host_environment  'http://172.17.0.1'; # set your host or ip environment

    ## ========================================================= ##

    #-> json file is view
    location  ~  \.json  {
      add_header  Content-Type  application/json;
      try_files   $uri  /index.html;
    }

    ## ========================================================= ##

    #-> ReactJS (react router)
    location  /  {
      access_log  logs/web.service.log  main;
      proxy_pass  $url_host_environment:3000;
      # proxy_pass  http://backend:3000;
    }

    # a service
    location  /api/a  {
      access_log  logs/a.service.log  main;
      proxy_pass  $url_host_environment:8080;
      # proxy_pass  http://backend:3000;
    }

    # b service
    location  /api/b  {
      access_log  logs/b.service.log  main;
      proxy_pass  $url_host_environment:8081;
      # proxy_pass  http://backend:3000;
    }

    ## ========================================================= ##

    # main service
    location  /api/main  {
      access_log  logs/main.service.log  main;
      proxy_pass  $url_host_environment:8082;
      # proxy_pass  http://backend:3000;
    }

    ## ========================================================= ##

    #-> redirect server error pages to the static page service-down.html
    error_page  502  /errors/service-down.html;

    ## ========================================================= ##
  }
}
